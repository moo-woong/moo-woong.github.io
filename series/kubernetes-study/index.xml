<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes Study on Moo-woong</title>
    <link>https://moo-woong.github.io/series/kubernetes-study/</link>
    <description>Recent content in Kubernetes Study on Moo-woong</description>
    <image>
      <url>https://moo-woong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://moo-woong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Jan 2023 17:00:14 +0900</lastBuildDate><atom:link href="https://moo-woong.github.io/series/kubernetes-study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Kubernetes Study] k8s objects - Pod</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-8-pod/</link>
      <pubDate>Sun, 29 Jan 2023 17:00:14 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-8-pod/</guid>
      <description>Pod? 앞선 Study에서 언급된 바와 같이 Kubernetes가 처리하는 가장 작은 단위는 Pod입니다. 이 Pod는 Containerized 애플리케이션을 encapsulation한 단위입니다.
가장 작은 단위의 Kubernetes의 환경을 구성해보겠습니다.
 A Single cluster A Single node A single Pod A single instance in a Pod    사용자가 늘어나 애플리케이션의 처리부하를 줄이기 위해서는 애플리케이션의 instance를 증설해야합니다.
그렇다면 증설은 어떻게 할까요? Containerized 애플리케이션 instance를 Pod에 추가할까요? 앞서 설명했듯이 Kubernetes의 가장 작은 object 단위는 Pod이므로, Pod가 추가로 증설하여 추가되는 부하용량을 처리해야합니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s objects - Recap</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-9-recap/</link>
      <pubDate>Sun, 29 Jan 2023 17:00:14 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-9-recap/</guid>
      <description>Pod? 앞선 Study에서 언급된 바와 같이 Kubernetes가 처리하는 가장 작은 단위는 Pod입니다. 이 Pod는 Containerized 애플리케이션을 encapsulation한 단위입니다.
가장 작은 단위의 Kubernetes의 환경을 구성해보겠습니다.
 A Single cluster A Single node A single Pod A single instance in a Pod    사용자가 늘어나 애플리케이션의 처리부하를 줄이기 위해서는 애플리케이션의 instance를 증설해야합니다.
그렇다면 증설은 어떻게 할까요? Containerized 애플리케이션 instance를 Pod에 추가할까요? 앞서 설명했듯이 Kubernetes의 가장 작은 object 단위는 Pod이므로, Pod가 추가로 증설하여 추가되는 부하용량을 처리해야합니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s components - kube-proxy</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-7/</link>
      <pubDate>Tue, 24 Jan 2023 22:39:01 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-7/</guid>
      <description>kube-proxy? Kubernetes cluster내에서는 같은 네임스페이스에 있는 각 Pod들은 다른 Pod들과 통신이 가능합니다. 설령 다른 워커노드에 설치된 Pod들도 마찬가지로 통신이 가능합니다. 이러한 통신을 위해서 내부 가상 네트워크인 Pod 네트워크가 필요합니다.
  저는 웹서비스 하나를 운용하고 있으며, 이를 Kubernetes를 통해 운용하고 있다고 가정하겠습니다. 저의 Backend 서버는 Node1에 배치되어 있고, 서비스의 정보를 영구적으로 저장하기 위해 데이터베이스를 사용하며, 데이터베이스는 Node2에 배치되어있습니다.
  Backend 서버는 IP(10.32.0.35)를 통해 데이터베이스에 접근할 수 있습니다. 하지만 데이터베이스가의 IP가 항상 해당 IP를 갖는다는 보장이 없습니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s components - kubelet</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-6/</link>
      <pubDate>Tue, 24 Jan 2023 22:22:42 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-6/</guid>
      <description>kubelet? 앞선 포스팅에서 언급된것 처럼 kubelet은 Cluster를 구성하는 모든 워커노드에 설치됩니다. 이후 Pod배치, Pod상태 조회 요청 등 kube-apiserver의 요구를 받아 Pod의 설치, 삭제, 조회 등 실제적인 작업을 워커노드에서 수행합니다.
Pod의 설치가 요청되면
 kube-scheudler Pod가 설치될 노드들을 파악 후, Node1에 Pod생성을 요청합니다. kube-scheduler의 요청을 받은 kube-apiserver해당 Pod설치 정보를 Node1의 kubelet에 요청합니다. kubelet은 해당 워커노드의 runtime-engine을 통해 Pod를 생성합니다. 작업완료 후 kubelet은 작업완료 내용을 kube-apiserver에 알립니다.    kubelet은 kube-apiserver, kube-scheduler와 달리 Vanilla kubernetes에 포함되어 있지 않습니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s components - kube-scheduler</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-5/</link>
      <pubDate>Tue, 24 Jan 2023 21:56:21 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-5/</guid>
      <description>kube-scheduler? 앞선 포스팅에서 언급된것 처럼 kube-shceduler는 Pod를 배치할 때 어느 노드에 배치될지 결정합니다. kube-scheduler는 Pod의 배치만 결정할 뿐 실제 Pod를 Node에 배치하는 것은 각 노드에 설치된 kubelet이 관장합니다.
kube-scheduler의 역할은 언뜻 보기에는 간단해보입니다. 하지만 실제로는 간단한 작업만을 담당하지 않습니다..!
Cluster에는 수 각 Node에 배치될 수 많은 Pod가 있고, Worker node로 동작하는 Node들이 있을 수 있습니다. Pod가 요구하는 리소스, tolerations, nodeAffinity 등 예외조건들이 있을 수 있으며 현재 노드의 유휴 리소스에 따라 배치 가능한 Pod가 있을 수도, 없을수도 있습니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s components - kube-controller-manager</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-4/</link>
      <pubDate>Tue, 24 Jan 2023 17:16:42 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-4/</guid>
      <description>kube-controller-manager? kube-controller-manager의 역할은 Kubernetes를 구성하하는 다양한 컨트롤러들을 관리하는 것입니다. 컨트롤러들은 운용자로부터 주어진 상태(desired state)를 만족시키기 위해 다음과 같은 역할을 합니다.
 상태 모니터링 상태에 따른 상태 해결(교정)  node-controller는 Cluster를 구성하는 노드들의 상태를 모니터링 합니다. 모니터링은 kube-apiserver를 통해 수행하며 매 5초 마다 상태관리를 수행합니다. 또한 노드의 이상이 감지될 시 40초간의 Grace period를 두어, 40초 이후에도 health check이 실패할 경우 NotReady Status를 만들어 해당 노드로 스케쥴링이 되지 않도록 합니다.
  repliaction-controller는 ReplicaSet관리와 desinered Pod 수를 모니터링하고 관리합니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s components - kube-apiserver</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-3/</link>
      <pubDate>Mon, 16 Jan 2023 22:50:26 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-3/</guid>
      <description>kube-apiserver? kube-apiserver는 Kubernetes Cluster를 구성하데 필수적인 컴포넌트로, Cluster를 구성하는 컴포넌트들과 통신을 통해 최신의 상태를 유지할 수 있도록 합니다.
운용자가 kubectl을 통해 CLI 명령을 한다면, kubectl은 사용자의 인증을 진행한 후 변수에 설정된 kube-apiserver주소로 REST Query를 수행합니다. 운용자가 kubectl get node명령어를 통해 현재 cluster에 join 한 노드들의 정보를보려고 한다고 가정하겠습니다. kubectl은 가장 먼저 kube-apiserver는 요청의 정당성을 확인 한 후, kubectl을 통해 요청한 정보 처리를 위해 관련된 정보를 etcd에 쿼리하여 정보를 받아서 운용자에게 응답합니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] k8s components - ETCD</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-2/</link>
      <pubDate>Sun, 15 Jan 2023 23:03:34 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-2/</guid>
      <description>etcd? etcd는 key-value 분산 저장소입니다. 오픈소스이며, Kubernetes에서 사용되어 유명해진 데이터베이스입니다. 분산 저장소라는 말에서 알 수 있듯이 ETCD는 Replication State Machine이며, 분산 컴퓨팅 환경에서 High Availability를 제공하고 높은 신뢰성을 제공합니다. Kubernetes의 다양한 정보들이 ETCD를 통해 저장되므로 고가용성이 중요합니다.
Key-value store? 전통적으로 데이터베이스는 행과 열로 이루어진 Tabular Format 구성됩니다. 관계형 데이터베이스 SQL이 대표적입니다. key-value store는 NoSQL 데이터베이스의 한 종류이며,
Key-value store 구조   위의 테이블은 Tabular Format의 예입니다. 행(Row)는 각 사람들의 정보를 나타내고 열(Column)은 각 타입의 값을 나타냅니다.</description>
    </item>
    
    <item>
      <title>[Kubernetes Study] Cluster Architecture</title>
      <link>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-1/</link>
      <pubDate>Sun, 15 Jan 2023 20:26:32 +0900</pubDate>
      
      <guid>https://moo-woong.github.io/posts/kubernetes/kubernetes-study-1/</guid>
      <description>Kubernetes Study posts들은 Udemy의 Kubernetes 스테디셀러인 Mumshad의 Certified Kubernetes Administrator (CKA) with Practice Tests 강의를 스터디하며 강의 내용을 체득하기 위해 간략하게 정리하는 포스트입니다. 따라서 관련 내용들은 Udemy 강의 내용이며, 아직 다 학습하지는 못했지만.. 강의 내용이 아주 이해하기 쉽게 잘 설명된것 같으니 할인할 때 구매하시면 좋을것 같습니다. 저는 약 19,000에 구매했던것 같습니다.
Kubernetes 구성요소들 Kubernetes는 contaierized 된 application들의 실행, 관리하는 플랫폼입니다. Google에서 처음 개발되었으며 오픈소스 기반으로 현재는 Linux foundation 재단에서 관리합니다. AWS, Azure, GCP 등 Public Cloud 업체들은 Kubernetes 환경을 제공하고 있고 규모가 있는 업체들의 경우 On-premise로 Kubernetes를 구축하여 Service를 제공하고 있습니다.</description>
    </item>
    
  </channel>
</rss>
