<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Study on Moo-woong</title>
    <link>https://moo-woong.github.io/categories/study/</link>
    <description>Recent content in Study on Moo-woong</description>
    <image>
      <url>https://moo-woong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://moo-woong.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Mar 2024 11:11:53 +0000</lastBuildDate><atom:link href="https://moo-woong.github.io/categories/study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning eBPF - What Is eBPF, and Why Is it Imports? 2/2</title>
      <link>https://moo-woong.github.io/posts/ebpf/learning-ebpf-ch1-2/</link>
      <pubDate>Mon, 04 Mar 2024 11:11:53 +0000</pubDate>
      
      <guid>https://moo-woong.github.io/posts/ebpf/learning-ebpf-ch1-2/</guid>
      <description>Learning eBPF 스터디
새로운 기능을 커널에 추가하기 리눅스 커널은 3,000만줄의 거대한 코드의 복합체고 매우 복잡하다. 만약 우리가 커널에 새로운 기능이 필요하다면 커널에 대해 연구하고 새로운 기능을 개발하고, 수 많은 리뷰어로 부터 리뷰를 받아 메인 스트림에 패치를 추가해야 한다. 이 과정은 때때로 지지부진하며 많은 노력과 시간이 필요하다. 또한 이 기간동안 우리의 요구사항이 변경될 수도 있다.
커널에 기능 추가 대신 커널 모듈 만들기 커널과 같은 거대한 커뮤니티에 기여하는건 개발자로서 좋은 경험과 이력이지만 지지부진한 시간을 소비하기 싫다면 커널에 패치 만들기 말고 커널 모듈을 만들 수 있다.</description>
    </item>
    
    <item>
      <title>Learning eBPF - What Is eBPF, and Why Is it Imports? 1/2</title>
      <link>https://moo-woong.github.io/posts/ebpf/learning-ebpf-ch1/</link>
      <pubDate>Sat, 02 Mar 2024 07:04:46 +0000</pubDate>
      
      <guid>https://moo-woong.github.io/posts/ebpf/learning-ebpf-ch1/</guid>
      <description>Learning eBPF 스터디
eBPF는 개발자가 코드를 직접 커널 레이어에서 로드하고 커널의 동작을 변경할 수 있도록 허용하는 혁신적인 기술이다. eBPF는 고성능의 네트워킹, Observability, 보안도구에 이용할 수 있다. eBPF를 활용한 신규 애플리케이션을 만든다면 기존의 애플리케이션에 추가적인 수정이나 재설정등이 불필요한 이점이 있다.
eBPF를 이용해서 다음이 것들을 할 수 있다.
 시스템 측면에서(low level에서), 대부분의 성능측정 가시성을 제공하는 고성능의 네트워킹 분석 비정상 행위를 탐지하거나 예방  Note Moniroting: 시스템의 오류, 결함 또는 비정상적인 데이터들을 수집 및 가시화 Observability: 애플리케이션의 동작에 대한 세부적인 인사이트를 제공하기 위해 다양한 데이터(log, metric, audit)을 수집하고 분석하는 것을 의미하며 Micro-Service 아키텍쳐의 전반적인 구조적 결함을 찾는데 활용됨.</description>
    </item>
    
  </channel>
</rss>
